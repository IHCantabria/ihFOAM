    waveHeights_ = (IHWavesDict.lookupOrDefault("waveHeights", List<scalar> (1, -1.0) ));
    wavePeriods_ = (IHWavesDict.lookupOrDefault("wavePeriods", List<scalar> (1, -1.0) ));
    waveDirs_ = (IHWavesDict.lookupOrDefault("waveDirs", List<scalar> (1, -1.0) ));
    wavePhases_ = (IHWavesDict.lookupOrDefault("wavePhases", List<scalar> (1, -1.0) ));

    secondOrder_ = (IHWavesDict.lookupOrDefault<bool>("secondOrder", false ));

    if (nPaddles_ < 1)
    {
        FatalError << "Check nPaddles value." << exit(FatalError);
    }

    if ( nPaddles_ > 1 )
    {
        nPaddles_ = decreaseNPaddles( nPaddles_, patchD, dMin, dSpan );
        reduce(nPaddles_, minOp<label>());
    }

    if ( min(waveHeights_) < 0.0 )
    {
        FatalError << "Check wave height values." << exit(FatalError);
    }

    if ( min(wavePeriods_) <= 0.0 )
    {
        FatalError << "Check wave period values." << exit(FatalError);
    }

    nComp_ = waveHeights_.size();

    if ( nComp_ != wavePeriods_.size() || nComp_ != waveDirs_.size() || nComp_ != wavePhases_.size() || nComp_ == 1 )
    {
        FatalError << "Check the number of components for " << "waveHeights, wavePeriods, wavePhases and waveDirs." << exit(FatalError);
    }

    if ( secondOrder_ )
    {
        if ( max(waveDirs_) != min(waveDirs_) || max(waveDirs_) != 0.0 )
        {
            FatalError << "Check waveDirs must be the same and equal to 0ยบ" << " to apply second order formulation." << exit(FatalError); 
        }
    }

    waveLengths_ = 0.0*waveHeights_;

    forAll(waveLengths_, compInd)
    {
        waveLengths_[compInd] = StokesIFun::waveLength (RealwaterDepth_, wavePeriods_[compInd]);
    }
